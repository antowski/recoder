// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

#Использовать asserts
#Использовать tempfiles
#Использовать logos
#Использовать "..\.."

Перем Лог;

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСоздаюВоВременномКаталогеТекстовыйФайлВКодировкеСТекстом");
	ВсеШаги.Добавить("ЯВыполняюПерекодировкуВременногоКаталога");
	ВсеШаги.Добавить("ЯЧитаюИзФайлаВКодировкеТекст");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры

//Я создаю во временном каталоге текстовый файл "first.txt" в кодировке "windows-1251" с текстом "Кириллица \nand latin"
Процедура ЯСоздаюВоВременномКаталогеТекстовыйФайлВКодировкеСТекстом(Знач ИмяФайла, Знач Кодировка, Знач ТекстФайла) Экспорт

	ПолноеИмяФайла = ОбъединитьПути(ВременныйКаталог(),ИмяФайла);

	Лог.Отладка("Создаю файл: " + ПолноеИмяФайла);

	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайла, Кодировка);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

//Я выполняю перекодировку временного каталога
Процедура ЯВыполняюПерекодировкуВременногоКаталога() Экспорт
	Перекодировщик.ПерекодироватьКаталог(ВременныйКаталог());
КонецПроцедуры

//Я читаю из файла "first.txt" в кодировке "utf-8" текст "Кириллица \nand latin"
Процедура ЯЧитаюИзФайлаВКодировкеТекст(Знач ИмяФайла, Знач Кодировка, Знач ОжидаемыйТекст) Экспорт
	
	ЧтениеТекста = Новый ЧтениеТекста(ОбъединитьПути(ВременныйКаталог(),ИмяФайла), Кодировка);
	ТекстВФайле = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(ТекстВФайле).Равно(ОжидаемыйТекст);

КонецПроцедуры

Функция ВременныйКаталог()
	Возврат БДД.ПолучитьИзКонтекста("ВременныйКаталог");
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.recoder");
//Лог.УстановитьУровень(УровниЛога.Отладка);
